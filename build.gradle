buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE"
  }
}

plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    //id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
    id "com.bmuschko.docker-remote-api" version "4.6.2"
}

apply from: "$rootDir/gradle/versioning.gradle"
apply plugin: "io.spring.dependency-management"

group = 'ch.so.agi'

sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.locationtech.jts:jts-core:1.16.1'    
    implementation 'com.bedatadriven:jackson-datatype-jts:2.2'    
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

// Build Docker image
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

docker {
    registryCredentials {
        username = System.env.dockerRegistryUser
        password = System.env.dockerRegistryPass
    }
}

task buildDockerImage(type: DockerBuildImage) {
    description = "Build docker image."
    inputDir = project.projectDir
    tags = ["sogis/parcel-info-service:"+ version, "sogis/parcel-info-service:latest"]
    labels = ["parcel-info-service.created": new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date()), 
            "parcel-info-service.git_commit":  getCheckedOutGitCommitHash(), 
            "parcel-info-service.travis_build": version]
}

def tags = ["latest", version]

tags.each { tag ->
    def imageTag = tag.toString()
    task "pushDockerImage_$imageTag"(type: DockerPushImage) {
        description = "Push docker image to hub.docker.com: $imageTag"
        imageName =  "sogis/parcel-info-service:$imageTag"
    }
}

task pushDockerImages() {
    description = "Push docker images to hub.docker.com."
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('pushDockerImage_') }
    }    
}

import java.text.SimpleDateFormat

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

// Create a static text file with same meta information as the docker labels
task versionTxt()  {
    outputs.upToDateWhen { false }
    doLast {
        new File("version.txt").text = """
Version: $version
Revision: ${getCheckedOutGitCommitHash()}
Buildtime: ${getTimestamp()}
Application-name: parcel-info-service
"""
    }
}
task copyVersionTxt(type: Copy) {
    from "version.txt"
    into "src/main/resources/static/"
}
copyVersionTxt.dependsOn(versionTxt)
build.dependsOn(copyVersionTxt)
classes.dependsOn(copyVersionTxt)

